'use strict';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/components/Testing.svelte generated by Svelte v3.23.2 */

const Testing = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { firstName } = $$props;
	let { lastName } = $$props;
	if ($$props.firstName === void 0 && $$bindings.firstName && firstName !== void 0) $$bindings.firstName(firstName);
	if ($$props.lastName === void 0 && $$bindings.lastName && lastName !== void 0) $$bindings.lastName(lastName);

	return `<h1>Testing Component</h1>

<form action="${""}"><input type="${"text"}"${add_attribute("value", firstName, 0)}>
  <input type="${"text"}"${add_attribute("value", lastName, 0)}></form>`;
});

/* src/App.svelte generated by Svelte v3.23.2 */

const css = {
	code: "main.svelte-1e9puaw{text-align:center;padding:1em;max-width:240px;margin:0 auto}@media(min-width: 640px){main.svelte-1e9puaw{max-width:none}}",
	map: "{\"version\":3,\"file\":\"App.svelte\",\"sources\":[\"App.svelte\"],\"sourcesContent\":[\"<script>\\n  // import { Router, Link, Route } from \\\"svelte-routing\\\";\\n  import Testing from \\\"./components/Testing.svelte\\\";\\n</script>\\n\\n<style>\\n  main {\\n    text-align: center;\\n    padding: 1em;\\n    max-width: 240px;\\n    margin: 0 auto;\\n  }\\n\\n  h1 {\\n    color: #ff3e00;\\n    text-transform: uppercase;\\n    font-size: 4em;\\n    font-weight: 100;\\n  }\\n\\n  @media (min-width: 640px) {\\n    main {\\n      max-width: none;\\n    }\\n  }\\n</style>\\n\\n<main>\\n\\t<Testing />\\n</main>\\n\"],\"names\":[],\"mappings\":\"AAME,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,eAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC\"}"
};

const App = create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	$$result.css.add(css);
	return `<main class="${"svelte-1e9puaw"}">${validate_component(Testing, "Testing").$$render($$result, {}, {}, {})}</main>`;
});

module.exports = App;
